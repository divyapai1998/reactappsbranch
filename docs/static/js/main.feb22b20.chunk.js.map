{"version":3,"sources":["components/stopwatch/Stopwatch.js","App.js","reportWebVitals.js","index.js"],"names":["usestyles","makeStyles","outerDivStyle","color","backgroundImage","padding","borderRadius","InnerDivStyle","backgroundColor","btngroup","marginTop","justifyContent","counter","minutesCount","Stopwatch","props","intervalRef","useRef","useState","seconds","setSeconds","minutes","setMinutes","startorStop","setStartorStop","classes","className","Grid","container","item","xs","Button","onClick","clearInterval","current","variant","setInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAIMA,EAAYC,YAAW,CACzBC,cAAe,CACXC,MAAO,QACPC,gBAAiB,6CACjBC,QAAS,UACTC,aAAc,OAElBC,cAAe,CAEXF,QAAS,UACTG,gBAAiB,aACjBL,MAAO,SAEXM,SAAU,CACNC,UAAW,KACXC,eAAgB,YAKpBC,EAAU,EACVC,EAAc,EAiDHC,EAhDG,SAACC,GACf,IAAIC,EAAcC,iBAAO,MACzB,EAA8BC,mBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAsCJ,oBAAS,GAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KA6BMC,EAAUzB,EAAUe,GAC1B,OACI,sBAAKW,UAAWD,EAAQvB,cAAxB,UACI,+CACA,qBAAKwB,UAAWD,EAAQlB,cAAxB,SACI,8BAAK,+BAAKc,EAAQ,GAAG,IAAIA,EAAQR,EAA5B,IAA2CM,EAAQ,GAAG,IAAIA,EAAQA,SAE3E,eAACQ,EAAA,EAAD,CAAMD,UAAWD,EAAQhB,SAAUmB,WAAS,EAA5C,UACI,cAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SAAkB,cAACC,EAAA,EAAD,CAAQC,QAAS,YAlB/B,IAkB+CT,IAjBvDC,GAAe,GAAQS,cAAcjB,EAAYkB,WAiBoBC,QAAQ,YAAvD,SAAmE,sBAAMT,UAAU,iBAAhB,8BACrF,cAACC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SAAkB,cAACC,EAAA,EAAD,CAAQC,QAAS,YAlC/B,IAkCgDT,IAjCxDC,GAAe,GACfR,EAAYkB,QAAUE,aAAY,WAEf,MADfxB,GAAoB,KAGhBU,EADAT,GAA4B,GAG5BO,EADAR,EAAS,IAGbQ,EAAWR,KACZ,OAuBmEuB,QAAQ,YAAxD,SAAoE,sBAAMT,UAAU,iBAAhB,4BACtF,cAACC,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAf,SAAkB,cAACC,EAAA,EAAD,CAAQC,QAhBnB,WAEfnB,EAAe,EACfO,EAFAR,EAAU,GAEWU,EAAWT,GAAeW,GAAe,GAAQS,cAAcjB,EAAYkB,UAazCC,QAAQ,YAArC,SAAiD,sBAAMT,UAAU,iBAAhB,oCCxDpEW,MAVf,WACE,OACE,qBAAKX,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACA,cAAC,EAAD,SCKSY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.feb22b20.chunk.js","sourcesContent":["import { Button, Grid } from \"@material-ui/core\";\r\nimport React, { useRef, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst usestyles = makeStyles({\r\n    outerDivStyle: {\r\n        color: \"black\",\r\n        backgroundImage: \"linear-gradient(to right,#ddd6f3, #faaca8)\",\r\n        padding: \"2em 4em\",\r\n        borderRadius: \"2em\"\r\n    },\r\n    InnerDivStyle: {\r\n    \r\n        padding: \"3em 8em\",\r\n        backgroundColor: \"whitesmoke\",\r\n        color: \"black\",\r\n    },\r\n    btngroup: {\r\n        marginTop: \"4%\",\r\n        justifyContent: \"center\"\r\n    }\r\n\r\n})\r\n\r\nlet counter = 0;\r\nlet minutesCount =0;\r\nconst Stopwatch = (props) => {\r\n    let intervalRef = useRef(null)\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [minutes, setMinutes] = useState(0);\r\n    const [startorStop, setStartorStop] = useState(false)\r\n\r\n\r\n    const startTimer = (val) => {\r\n        if (val === false) {\r\n            setStartorStop(true);\r\n            intervalRef.current = setInterval(() => {\r\n                counter = counter + 1;\r\n                if(counter === 60){\r\n                    minutesCount = minutesCount+1;\r\n                    setMinutes(minutesCount);\r\n                    counter =0;\r\n                    setSeconds(counter)\r\n                }\r\n                setSeconds(counter)\r\n            }, 1000);\r\n        }\r\n    }\r\n    const stopTimer = (val) => {\r\n        if (val === true) {\r\n            setStartorStop(false); clearInterval(intervalRef.current);\r\n        }\r\n    }\r\n    const resetTimer = () => {\r\n        counter = 0;\r\n        minutesCount = 0;\r\n        setSeconds(counter); setMinutes(minutesCount); setStartorStop(false); clearInterval(intervalRef.current)\r\n    }\r\n\r\n    const classes = usestyles(props)\r\n    return (\r\n        <div className={classes.outerDivStyle}>\r\n            <h1>STOPWATCH APP</h1>\r\n            <div className={classes.InnerDivStyle}>\r\n                <div><h2>{minutes<10?'0'+minutes:minutesCount}:{seconds<10?'0'+seconds:seconds}</h2></div>\r\n            </div>\r\n            <Grid className={classes.btngroup} container  >\r\n                <Grid item xs={3}><Button onClick={() => stopTimer(startorStop)} variant='contained'><span className=\"material-icons\">pause_circle</span></Button></Grid>\r\n                <Grid item xs={3}><Button onClick={() => startTimer(startorStop)} variant='contained'><span className=\"material-icons\">play_arrow</span></Button></Grid>\r\n                <Grid item xs={3}><Button onClick={resetTimer} variant='contained'><span className=\"material-icons\">restart_alt</span></Button></Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\nexport default Stopwatch","import './App.css';\nimport  Stopwatch  from './components/stopwatch/Stopwatch'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Stopwatch/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}